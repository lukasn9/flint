Basic:
let - you can declare a variable using let
usage let <varName> : num; | let x : bool; | let x : float; | let x : text | let x : char

set - sets a value of a variable
usage set <varName> = 5; | set x = true; | set x = 3.14; | set x = "Hello"; | set x = "c";

check - basically an if statement
othercheck - equivalent to elif
other - equivalent to else

echo - prints a string to the terminal
// - one line comment
/* - multi line comment start
*/ - multi line comment end

loop - creates an infinite loop
stop - breaks the loop

loop range - loops for a set amount of times
usage loop range 1 -> 10 {
    echo "loop";
}

funcdo - creates a function
done - closes the function
usage:
funcdo hello : text
    echo "Hello";
done

Operators:
++> - left num plus right num
usage set <varName> = 12 ++> 5

--> - left num minus right num
usage set <varName> = 12 --> 5

*> - multiplies the left num by the right num
usage set <varName> = 12 *> 5

/> - divides the left num by the right num
usage set <varName> = 12 /> 5

**> - multiplies the left num to the power of the right num
usage set <varName> = 12 **> 5


//> - divides the left number by the right number to the nearest num
usage set <varName> = 12 //> 5

%> - modulo
usage set <varName> = 10 %> 3;

Logical operations:
set <boolName> = <cond1> && <cond2>;
set <boolName> = <cond1> || <cond2>;
set <boolName> = !<condition>;
set <boolName> = x == y;
set <boolName> = x != y;
set <boolName> = x > y;
set <boolName> = x < y;

Ternary operations:
set <boolName> = <condition> ? <trueValue> : <falseValue>;

Error handling:
run {
    set x = 1 /> 0;
} catch {
    echo "error";
}

Default function parameters:
funcdo greet(name = "world") : text
    echo "Hello" ++> name;
done

Modules:
you can create custom modules with reusable functions in them

module math {
    funcdo add(a, b) : num
        return a ++> b;
    done

    funcdo multiply(a, b) : num
        return a *> b;
    done
}

echo math.add(4, 3);

Lambda expressions:
let add : func;
set add = (a, b) => a ++> b;

echo add(5, 7);
